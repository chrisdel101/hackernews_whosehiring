'use server'
import { fetchAllPosts, fetchItemById, fetchData } from '../../../apiClient/fetch'
import { currentMonthID, endPoint, whoseHiring } from '@/app/constants'
import JobsList from '../../components/client/JobsList'
import { URLParams } from '@/app/page'
import { findMatchingPost, verifyInputIsMonthYear } from '@/app/utils'
import { Job, Post } from '@/app/types'

const fetchAllJobsByPost = async (post: Post) => {

  const jobs = post.kids.map(async (id: number) => {
      const job = await fetchItemById(id.toString())
      return job
  })
  return Promise.all(jobs)
}
export const fetchJobsByBatch = async (post: Post, batch: number) => {
  // console.log('post', post)
  const batchJobs = post?.kids?.slice(0, batch)
  const jobs: Job[] = []
  for(let id of batchJobs) {
    const job = await fetchItemById(id?.toString())
    // console.log('job', job)
    jobs.push(job)
  }
  // for (let index = 0; index < batch; index++) {
  // }
  return Promise.all(jobs)
}


export default async function Page({params}: URLParams) {
  // console.log('page params', params)

  // fetch data for whoseHiring
  const userData = await fetchData(`${endPoint}/${whoseHiring}.json`)
  const batch = 20
  const {year, month} = params
  if(verifyInputIsMonthYear(year, month)) {
    const post = await findMatchingPost(year, month, userData)
    if(!post){
      // send to 404
      return <div>404 not found</div>
    } else {
      return (
          <JobsList 
          firstJobs={await fetchJobsByBatch(post, batch)} 
          post={post} 
          nums={[
            39623481,
            39622619,
            39616409,
            39622115,
            39563104,
            39615397,
            39595252,
            39566229,
            39565959,
            39612337,
            39566581,
            39619592,
            39567662,
            39564714,
            39565008,
            39564821,
            39564625,
            39609618,
            39563826,
            39566897,
            39568866,
            39608825,
            39564249,
            39568153,
            39566214,
            39563904,
            39590905,
            39568964,
            39594365,
            39588339,
            39605152,
            39568907,
            39565973,
            39604251,
            39573789,
            39565954,
            39609435,
            39574076,
            39566558,
            39566288,
            39565278,
            39563423,
            39565743,
            39600945,
            39567515,
            39564067,
            39566399,
            39563053,
            39562999,
            39563806,
            39563340,
            39563945,
            39565127,
            39575293,
            39613647,
            39563458,
            39564087,
            39566165,
            39569335,
            39563374,
            39565855,
            39599731,
            39567125,
            39574631,
            39564688,
            39598345,
            39566905,
            39574718,
            39570322,
            39564771,
            39570076,
            39615625,
            39590986,
            39572625,
            39563966,
            39565809,
            39564527,
            39568451,
            39604528,
            39564434,
            39564416,
            39566935,
            39566927,
            39564147,
            39571708,
            39569909,
            39564717,
            39565970,
            39566416,
            39563429,
            39566595,
            39567856,
            39597796,
            39563479,
            39563246,
            39566372,
            39563519,
            39568082,
            39593081,
            39564440,
            39564401,
            39567852,
            39564540,
            39566146,
            39568272,
            39595719,
            39565247,
            39566052,
            39563741,
            39593805,
            39587673,
            39569042,
            39613482,
            39566209,
            39566390,
            39565642,
            39566623,
            39566109,
            39563555,
            39563109,
            39562989,
            39562991,
            39563728,
            39564309,
            39567522,
            39566746,
            39590639,
            39563092,
            39595812,
            39600176,
            39604488,
            39566608,
            39564614,
            39565876,
            39572921,
            39588187,
            39567016,
            39563607,
            39588570,
            39567395,
            39567205,
            39571381,
            39568026,
            39568665,
            39566290,
            39564663,
            39567065,
            39562994,
            39569472,
            39565079,
            39568704,
            39602470,
            39565237,
            39565341,
            39565097,
            39568697,
            39564837,
            39564827,
            39598895,
            39591133,
            39565825,
            39565611,
            39567641,
            39563375,
            39568700,
            39567601,
            39600912,
            39570185,
            39563238,
            39578951,
            39608151,
            39564515,
            39567846,
            39566781,
            39581193,
            39588149,
            39590697,
            39569093,
            39574857,
            39567937,
            39563713,
            39566572,
            39568576,
            39566023,
            39563642,
            39578084,
            39564495,
            39569934,
            39566806,
            39563456,
            39564142,
            39567185,
            39565199,
            39563898,
            39563019,
            39593200,
            39563271,
            39563017,
            39566579,
            39572743,
            39564913,
            39563317,
            39563193,
            39585244,
            39566632,
            39564802,
            39563487,
            39563921,
            39564272,
            39563003,
            39566022,
            39566319,
            39567025,
            39564504,
            39566207,
            39563693,
            39565622,
            39564320,
            39564843,
            39565053,
            39565364,
            39563298,
            39569884,
            39567553,
            39563948,
            39565619,
            39565261,
            39563221,
            39566216,
            39567839,
            39563131,
            39564464,
            39565054,
            39565543,
            39563363,
            39564960,
            39566157,
            39565172,
            39570158,
            39588324,
            39580284,
            39569185,
            39591531,
            39565885,
            39570380,
            39564208,
            39565272,
            39564038,
            39564157,
            39566160,
            39567040,
            39564567,
            39563972,
            39563431,
            39566180,
            39587314,
            39568763,
            39568249,
            39568363,
            39563007,
            39569548,
            39569296,
            39563698,
            39575114,
            39564488,
            39594462,
            39564402,
            39563630,
            39563002,
            39566631,
            39592791,
            39587165,
            39564062,
            39568034,
            39565579,
            39563986,
            39566282,
            39568856,
            39563099,
            39572148,
            39563595,
            39572420,
            39571500,
            39564686,
            39568798,
            39563627,
            39563001
        ]}
          batchSize={batch}
          />
          // <JobsList jobs={await fetchXposts(post, 20)}/>
      )
    }
  } else {
    return <div>404 not found</div>
    // send to 404
  }
}
